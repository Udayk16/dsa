#include<iostream>
using namespace std;
class node{
    public:
    int val;
    node* next;
    node(int val){
        this->next=nullptr;
        this->val=val;
    }
};
class linkedlist{
    public:
    node* head;
    linkedlist(){
        head=nullptr;
    }
    void insert(int val){
        node* new_=new node(val);
        if (head==nullptr){
            head=new_;
            return;
        }
        node* temp=head;
        while(temp->next!=nullptr){
            temp=temp->next;
        }
        temp->next=new_;
        return;
    }
      void display()
    {
        node* temp=head;
        while(temp!=nullptr){
            cout<<temp->val<<"-->";
            temp=temp->next;
        }
        cout<<"null\n";
    }
    node* Reconnect(int pos){
        if(pos<1){
            cout<<"position does not exist";
            return head;
        }
        node* temp1=head;
        while(temp1->next!=nullptr){
                temp1=temp1->next;
        }
        int count=1;
        node* temp=head;
        while(count<pos){
            temp=temp->next;
            count++;
        }
        temp1->next=temp;
        cout<<temp->val<<"-->"<<temp->next->val<<endl;
        return temp;
    }
    void checkCycle(){
        if(head==nullptr){
            cout<<"empty list";
            return;
        }
        node* ptr1=head;
        node* ptr2=head;
        int flag=0;
        while(ptr2!=nullptr && ptr2->next!=nullptr){
            ptr1=ptr1->next;
            ptr2=ptr2->next->next;
            if(ptr1==ptr2){
                cout<<"cycle exist"<<endl;
                return;
            }
        }
        cout<<"cycle not exist";
        return;
    }
};
int main(){
    linkedlist ll1;
    ll1.insert(1);
    ll1.insert(2);
    ll1.insert(3);
    ll1.insert(4);
    ll1.insert(5);
    ll1.insert(6);
    ll1.insert(7);
    ll1.display();
    node* el=ll1.Reconnect(3);
    cout<<el->val<<endl;
    ll1.checkCycle();
   
    
}

output
1-->2-->3-->4-->5-->6-->7-->null
3-->4
3
cycle exist
