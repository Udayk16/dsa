creating a linked list and performing basic operations

#include<iostream>
using namespace std;
class node{
    public:
    int val;
    node* next;
    node(int val){
        this->val=val;
        this->next=nullptr;
    }
};
//creation of node function by passing the head and a value
node* ll(node* &head,int val){
    if(head==nullptr){
        return new node(val);
    }
    node* temp=head;
    while(temp->next!=nullptr){
        temp=temp->next;
    }
    temp->next=new node(val);
    return head;
}

// deletion of head node
void deletehead(node* &head){
    if(head==nullptr){
        return;
    }
    node* temp=head;
    head=head->next;
    delete(temp);
}
//deletion a node at a given position
node* deleteAtPosition(node* &head,int pos){
    if(pos<1 || head==nullptr){
        return head;
        }
    if (pos==1){
        deletehead(head);
        return head;
    }
    int count=1 ;
    node* temp=head;
    while(count!=pos-1 && temp->next!=nullptr){
        temp=temp->next;
        count++;
    }
    if (temp->next!=nullptr){
    node* set=temp->next;
    temp->next=set->next;
    delete(set);
    }
    return head;

}

//updating a value at a given node
void update(node* &head,int pos,int val){
    if (pos<0){
        return;
    }
    int current_position=1;
    node* temp=head;
    while(current_position!=pos && temp->next!=nullptr)
    {
        temp=temp->next;
        current_position++;

    }
    temp->val=val;
    
}

// inserting a value before tail node
node* insertBeforeTail(node* &head,int val){
    node* temp=head;
    while(temp->next->next!=nullptr){
        temp=temp->next;
    }node* new_node=new node(val);
    new_node->next=temp->next;
    temp->next=new_node;
    return head;
}

//inserting a node at head position as new head
node* athead(node* &head,int val){
    node* new_= new node(val);
    new_->next=head;
    head=new_;
    return head;
}
// inserting  value at a given node
node * atPosition(node* &head,int pos,int val){
    if(pos<1 || head==nullptr){
        return head;
        }
    if (pos==1){
        athead(head,val);
        return head;
    }
    int current_position=1;
    node* temp=head;
    while(current_position!=pos-1 && temp->next!=nullptr )
    {
        temp=temp->next;
        current_position++;

    }
    node* set= new node(val);
    set->next=temp->next;
    temp->next=set;
    return head;
}


//displaying the linked list by passing the head node;
void display(node* head){
    node* temp=head;
    while(temp!=nullptr){
        cout<<temp->val<<"-->";
        temp=temp->next;
    }
    cout<<"null"<<endl;
}

int main()
{
    node* head=nullptr;
    cout<<"linked list values are:"<<endl;
    head=ll(head,1);
    head=ll(head,2);
    head=ll(head,3);
    head=ll(head,4);
    head=ll(head,5);
    display(head);
    update(head,1,10);
    display(head);
    atPosition(head,1,50);
    display(head);
    deleteAtPosition(head,1);
    display(head);
    update(head,1,1);
     display(head);
     while(head){
        node *temp=head;
        head=head->next;
        delete(temp);
     }
    return 0;
}

//output
//1-->2-->3-->4-->5-->null
//10-->2-->3-->4-->5-->null
//50-->10-->2-->3-->4-->5-->null
//10-->2-->3-->4-->5-->null
//1-->2-->3-->4-->5-->null
